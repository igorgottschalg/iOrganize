/*
 * jOrg.java
 *
 * Created on 21/09/2010, 17:37:48
 */
package Forms;

import MP3.Criptografia;
import MP3.mp3Tags;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javazoom.jl.converter.Converter;
import javazoom.jl.decoder.JavaLayerException;
import org.farng.mp3.MP3File;
import org.farng.mp3.TagException;

/**
 *
 * @author Igor Gottschalg
 */
public class jOrg extends javax.swing.JFrame {

    List<mp3Tags> files = new ArrayList<mp3Tags>();
    String path, artista, titulo, faixa, caminho, album;
    int max, cancel = 0;

    /** Creates new form jOrg */
    public jOrg() {
        initComponents();
        jProgressBar1.setMaximum(max);
        jProgressBar1.setMinimum(0);
        this.setLocationRelativeTo(null);
        URL url = this.getClass().getResource("ICO.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("iOrganizer");
        setAlwaysOnTop(true);
        setResizable(false);
        setUndecorated(true);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Criar Log da Organização");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            String conteudo = null;
            conteudo = jTextArea1.getText();
            FileFilter filter = new FileFilter() {
                @Override
                public boolean accept(File f) {
                    return f.getName().toLowerCase().endsWith(".txt") || f.isDirectory();
                }

                public String getDescription() {
                    return "Arquivos de Texto (.txt)";
                }
            };
            JFileChooser local = new JFileChooser();
            local.setFileFilter((javax.swing.filechooser.FileFilter) filter);
            String localPath = null;
            local.showSaveDialog(this);
            if (local.getSelectedFile().getPath() != null) {
                if (!local.getSelectedFile().getPath().toLowerCase().endsWith(".txt")) {
                    localPath = local.getSelectedFile().getPath();
                } else {
                    localPath = local.getSelectedFile().getPath() + ".txt";
                }
            }
            System.out.println(localPath);
            try {
                FileWriter x = new FileWriter(localPath, true);
                conteudo += "\n\r"; // criando nova linha e recuo no arquivo
                x.write(conteudo); // armazena o texto no objeto x, que aponta para o arquivo
                x.close(); // cria o arquivo
                JOptionPane.showMessageDialog(null, "Arquivo gravado com sucesso", "Concluído", JOptionPane.INFORMATION_MESSAGE);
            } // em caso de erro apreenta mensagem abaixo
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jButton2.getText().equals("Fechar")) {
            if (cancel == 1) {
                dispose();
            } else {
                cancel = 1;
                jButton1.setEnabled(true);
                jButton2.setText("Fechar");
            }
        } else {
            dispose();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                jOrg w = new jOrg();
                w.setVisible(true);
                w.setLocationRelativeTo(null);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    public void organizar(String source, String destino, String fil, int row) throws IOException, TagException, JavaLayerException {
        if (fil.endsWith(".wav")) {
            converter(source, destino + fil);
            jTextArea1.setText("Arquivo Wav Convertido\n--------------------------------------------------------------------\n");
            jTextArea1.setCaretPosition(jTextArea1.getText().length());
        }
        mp3Tags mp3 = LerMP3(new File(source));
        jTextArea1.setText(jTextArea1.getText() + "Faixa: " + mp3.getFaixa()
                + "\nTítulo: " + mp3.getTitulo()
                + "\nArtista: " + mp3.getArtista()
                + "\nAlbúm: " + mp3.getAlbum()
                + "\nAno: " + mp3.getAno()
                + "\nLocal: " + mp3.getCaminho()
                + "\n--------------------------------------------------------------------\n");

        jTextArea1.setCaretPosition(jTextArea1.getText().length());

        while (criarPasta(destino) != 0) {
            //esperando
        }
        copyFile(source, destino + fil);
        jProgressBar1.setValue(row);
        if (row == max - 1) {
            //jProgressBar1.setIndeterminate(false);
            //JOptionPane.showMessageDialog(this, "Processo concluido com sucesso.");
            jButton1.setEnabled(true);
            jButton2.setText("Fechar");
        }

    }

    public void converter(String inFile, String outFile) throws JavaLayerException {
        Converter c = new Converter();
        c.convert(inFile, outFile);
    }

    public boolean copyFile(String inFile, String outFile) {
        InputStream is = null;
        OutputStream os = null;
        byte[] buffer;
        boolean success = true;
        try {
            is = new FileInputStream(inFile);
            os = new FileOutputStream(outFile);
            buffer = new byte[is.available()];
            is.read(buffer);
            os.write(buffer);
        } catch (IOException e) {
            success = false;
        } catch (OutOfMemoryError e) {
            success = false;
        } finally {
            try {
                if (is != null) {
                    is.close();
                }
                if (os != null) {
                    os.close();
                }
            } catch (IOException e) {
            }
        }
        return success;
    }

    public static mp3Tags LerMP3(File sourceFile) throws IOException, TagException {
        mp3Tags tag = new mp3Tags();
        MP3File mp3file = new MP3File(sourceFile);
        tag.setCaminho(sourceFile.getPath());
        try {
            if (mp3file.hasFilenameTag() == true && mp3file.hasID3v1Tag() == true) {
                try {
                    tag.setAlbum(mp3file.getID3v1Tag().getAlbum());
                } catch (Exception e) {
                }
                try {
                    tag.setArtista(mp3file.getID3v1Tag().getArtist());
                } catch (Exception e) {
                }
                try {
                    tag.setTitulo(mp3file.getID3v1Tag().getSongTitle());
                } catch (Exception e) {
                }
                try {
                    tag.setComentario(mp3file.getID3v1Tag().getComment());
                } catch (Exception e) {
                }
                try {
                    tag.setAno(mp3file.getID3v1Tag().getYear());
                } catch (Exception e) {
                }
                try {
                    tag.setFaixa(mp3file.getID3v1Tag().getTrackNumberOnAlbum());
                } catch (Exception e) {
                }
                try {
                    tag.setGenero(String.valueOf((mp3file.getID3v1Tag().getGenre())));
                } catch (Exception e) {
                }

            } else {

                if (mp3file.hasFilenameTag() == true && mp3file.hasID3v2Tag() == true) {
                    try {
                        tag.setAlbum(mp3file.getID3v2Tag().getAlbumTitle());
                    } catch (Exception e) {
                    }
                    try {
                        tag.setArtista(mp3file.getID3v2Tag().getLeadArtist());
                    } catch (Exception e) {
                    }
                    try {
                        tag.setTitulo(mp3file.getID3v2Tag().getSongTitle());
                    } catch (Exception e) {
                    }
                    try {
                        tag.setComentario(mp3file.getID3v2Tag().getSongComment());
                    } catch (Exception e) {
                    }
                    try {
                        tag.setAno(mp3file.getID3v2Tag().getYearReleased());
                    } catch (Exception e) {
                    }
                    try {
                        tag.setFaixa(mp3file.getID3v2Tag().getTrackNumberOnAlbum());
                    } catch (Exception e) {
                    }
                    try {
                        tag.setGenero((mp3file.getID3v2Tag().getSongGenre()));
                    } catch (Exception e) {
                    }
                }
            }
        } catch (Exception e) {
        }
        return tag;
    }

    public int criarPasta(String Local) {
        if (!(new File(Local).exists())) {
            boolean success = (new File(Local)).mkdirs();
            if (success == true) {
                return 1;
            } else {
                return 2;
            }
        } else {
            return 0;
        }
    }

    public void Label1(String string) {
        jLabel1.setText(string);
    }
}
